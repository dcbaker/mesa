# Copyright Â© 2018 Intel Corporation

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# This wrap is used by appveyor to build with meson against a pre-compiled llvm
project('llvm', ['cpp'])

cpp = meson.get_compiler('cpp')

_deps = []
_search = join_paths(meson.current_source_dir(), 'lib')
foreach d : ['LLVMAnalysis', 'LLVMAsmParser', 'LLVMAsmPrinter',
             'LLVMBinaryFormat', 'LLVMBitReader', 'LLVMBitWriter',
             'LLVMCodeGen', 'LLVMCore', 'LLVMCoroutines', 'LLVMCoverage',
             'LLVMDebugInfoCodeView', 'LLVMDebugInfoDWARF', 'LLVMDebugInfoMSF',
             'LLVMDebugInfoPDB', 'LLVMDemangle', 'LLVMDlltoolDriver',
             'LLVMExecutionEngine', 'LLVMGlobalISel', 'LLVMInstCombine',
             'LLVMInstrumentation', 'LLVMInterpreter', 'LLVMipo',
             'LLVMIRReader', 'LLVMLibDriver', 'LLVMLineEditor', 'LLVMLinker',
             'LLVMLTO', 'LLVMMCDisassembler', 'LLVMMCJIT', 'LLVMMC',
             'LLVMMCParser', 'LLVMMIRParser', 'LLVMObjCARCOpts', 'LLVMObject',
             'LLVMObjectYAML', 'LLVMOption', 'LLVMOrcJIT', 'LLVMPasses',
             'LLVMProfileData', 'LLVMRuntimeDyld', 'LLVMScalarOpts',
             'LLVMSelectionDAG', 'LLVMSupport', 'LLVMSymbolize',
             'LLVMTableGen', 'LLVMTarget', 'LLVMTransformUtils',
             'LLVMVectorize', 'LLVMX86AsmParser', 'LLVMX86AsmPrinter',
             'LLVMX86CodeGen', 'LLVMX86Desc', 'LLVMX86Disassembler',
             'LLVMX86Info', 'LLVMX86Utils', 'LLVMXRay']
  _deps += cpp.find_library(d, dirs : _search)
endforeach

ext_llvm = declare_dependency(
  include_directories : include_directories('include'),
  dependencies : _deps,
  version : '5.0.1',
)

irbuilder_h = files('include/llvm/IR/IRBuilder.h')

# vim: ft=meson.build
