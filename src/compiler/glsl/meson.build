glsl_parser = custom_target(
  'glsl_parser',
  input : 'glsl_parser.yy',
  output : ['glsl_parser.cpp', 'glsl_parser.h'],
  command : [yacc, '-o', '@OUTPUT0@', '-p', '_mesa_glsl_', '--defines=@OUTPUT1@', '@INPUT@'],
)

glsl_lexer = custom_target(
  'glsl_lexer',
  input : 'glsl_lexer.ll',
  output : 'glsl_lexxer.cpp',
  command : [lex, '-o', '@OUTPUT@', '@INPUT@']
)

ir_exp_op_str = custom_target(
  'ir_exp_op_str',
  input : 'ir_expression_operation.py',
  output : 'ir_expression_operation_strings.h',
  capture : true,
  command : [python, '@INPUT@', 'strings']
)

ir_exp_op_const = custom_target(
  'ir_exp_op_const',
  input : 'ir_expression_operation.py',
  output : 'ir_expression_operation_constant.h',
  capture : true,
  command : [python, '@INPUT@', 'const']
)

subdir('glcpp')

libglsl_sources = [
  'ast.h',
  'ast_array_index.cpp',
  'ast_expr.cpp',
  'ast_function.cpp',
  'ast_to_hir.cpp',
  'ast_type.cpp',
  'blob.c',
  'blob.h',
  'builtin_functions.cpp',
  'builtin_functions.h',
  'builtin_int64.h',
  'builtin_types.cpp',
  'builtin_variables.cpp',
  'generate_ir.cpp',
  'glsl_parser_extras.cpp',
  'glsl_parser_extras.h',
  'glsl_symbol_table.cpp',
  'glsl_symbol_table.h',
  'glsl_to_nir.cpp',
  'glsl_to_nir.h',
  'hir_field_selection.cpp',
  'ir_array_refcount.cpp',
  'ir_array_refcount.h',
  'ir_basic_block.cpp',
  'ir_basic_block.h',
  'ir_builder.cpp',
  'ir_builder.h',
  'ir_clone.cpp',
  'ir_constant_expression.cpp',
  'ir.cpp',
  'ir.h',
  'ir_equals.cpp',
  'ir_expression_flattening.cpp',
  'ir_expression_flattening.h',
  'ir_function_can_inline.cpp',
  'ir_function_detect_recursion.cpp',
  'ir_function_inlining.h',
  'ir_function.cpp',
  'ir_hierarchical_visitor.cpp',
  'ir_hierarchical_visitor.h',
  'ir_hv_accept.cpp',
  'ir_optimization.h',
  'ir_print_visitor.cpp',
  'ir_print_visitor.h',
  'ir_reader.cpp',
  'ir_reader.h',
  'ir_rvalue_visitor.cpp',
  'ir_rvalue_visitor.h',
  'ir_set_program_inouts.cpp',
  'ir_uniform.h',
  'ir_validate.cpp',
  'ir_variable_refcount.cpp',
  'ir_variable_refcount.h',
  'ir_visitor.h',
  'linker.cpp',
  'linker.h',
  'link_atomics.cpp',
  'link_functions.cpp',
  'link_interface_blocks.cpp',
  'link_uniforms.cpp',
  'link_uniform_initializers.cpp',
  'link_uniform_block_active_visitor.cpp',
  'link_uniform_block_active_visitor.h',
  'link_uniform_blocks.cpp',
  'link_varyings.cpp',
  'link_varyings.h',
  'list.h',
  'loop_analysis.cpp',
  'loop_analysis.h',
  'loop_controls.cpp',
  'loop_unroll.cpp',
  'lower_blend_equation_advanced.cpp',
  'lower_buffer_access.cpp',
  'lower_buffer_access.h',
  'lower_const_arrays_to_uniforms.cpp',
  'lower_discard.cpp',
  'lower_discard_flow.cpp',
  'lower_distance.cpp',
  'lower_if_to_cond_assign.cpp',
  'lower_instructions.cpp',
  'lower_int64.cpp',
  'lower_jumps.cpp',
  'lower_mat_op_to_vec.cpp',
  'lower_noise.cpp',
  'lower_offset_array.cpp',
  'lower_packed_varyings.cpp',
  'lower_named_interface_blocks.cpp',
  'lower_packing_builtins.cpp',
  'lower_subroutine.cpp',
  'lower_tess_level.cpp',
  'lower_texture_projection.cpp',
  'lower_variable_index_to_cond_assign.cpp',
  'lower_vec_index_to_cond_assign.cpp',
  'lower_vec_index_to_swizzle.cpp',
  'lower_vector.cpp',
  'lower_vector_derefs.cpp',
  'lower_vector_insert.cpp',
  'lower_vertex_id.cpp',
  'lower_output_reads.cpp',
  'lower_shared_reference.cpp',
  'lower_ubo_reference.cpp',
  'opt_algebraic.cpp',
  'opt_array_splitting.cpp',
  'opt_conditional_discard.cpp',
  'opt_constant_folding.cpp',
  'opt_constant_propagation.cpp',
  'opt_constant_variable.cpp',
  'opt_copy_propagation.cpp',
  'opt_copy_propagation_elements.cpp',
  'opt_dead_builtin_variables.cpp',
  'opt_dead_builtin_varyings.cpp',
  'opt_dead_code.cpp',
  'opt_dead_code_local.cpp',
  'opt_dead_functions.cpp',
  'opt_flatten_nested_if_blocks.cpp',
  'opt_flip_matrices.cpp',
  'opt_function_inlining.cpp',
  'opt_if_simplification.cpp',
  'opt_minmax.cpp',
  'opt_noop_swizzle.cpp',
  'opt_rebalance_tree.cpp',
  'opt_redundant_jumps.cpp',
  'opt_structure_splitting.cpp',
  'opt_swizzle_swizzle.cpp',
  'opt_tree_grafting.cpp',
  'opt_vectorize.cpp',
  'program.h',
  'propagate_invariance.cpp',
  's_expression.cpp',
  's_expression.h',
  'shader_cache.cpp',
  'shader_cache.h',
  glsl_lexer,
  glsl_parser,
  ir_exp_op_const,
  ir_exp_op_enum,
  ir_exp_op_str,
]

libglsl = static_library(
  'glsl',
  libglsl_sources,
  include_directories : [basic_includes, include_directories('.', '../nir')],
  link_with : [libnir, libglcpp],
)

libstandalone = static_library(
  'standalone',
  'main.cpp',
  include_directories : [basic_includes],
  link_with : [libglsl, libglsl_util, libmesautil]
)
